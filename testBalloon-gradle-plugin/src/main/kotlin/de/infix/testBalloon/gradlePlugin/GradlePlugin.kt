package de.infix.testBalloon.gradlePlugin

import buildConfig.BuildConfig
import org.gradle.api.Project
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.testing.Test
import org.jetbrains.kotlin.gradle.dsl.KotlinBaseExtension
import org.jetbrains.kotlin.gradle.plugin.KotlinCompilation
import org.jetbrains.kotlin.gradle.plugin.KotlinCompilerPluginSupportPlugin
import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet
import org.jetbrains.kotlin.gradle.plugin.SubpluginArtifact
import org.jetbrains.kotlin.gradle.plugin.SubpluginOption
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import kotlin.collections.iterator
import kotlin.io.path.Path
import kotlin.io.path.div
import kotlin.io.path.exists
import kotlin.io.path.writeText

@Suppress("unused")
class GradlePlugin : KotlinCompilerPluginSupportPlugin {
    override fun apply(target: Project): Unit = with(target) {
        // WORKAROUND https://youtrack.jetbrains.com/issue/KT-53477 â€“ KGP misses transitive compiler plugin dependencies
        configurations.named("kotlinNativeCompilerPluginClasspath") {
            dependencies.add(
                project.dependencies.create(
                    with(BuildConfig) {
                        "$PROJECT_GROUP_ID:$PROJECT_ABSTRACTIONS_ARTIFACT_ID:$PROJECT_VERSION"
                    }
                )
            )
        }

        extensions.create("testBalloon", GradleExtension::class.java)

        val testSourceSetNames = setOf("test", KotlinSourceSet.COMMON_TEST_SOURCE_SET_NAME)
        val generatedCommonTestDir = layout.buildDirectory.dir("generated/testBalloon/src/commonTest")

        extensions.configure<KotlinBaseExtension>("kotlin") {
            sourceSets.configureEach {
                if (name in testSourceSetNames) {
                    kotlin.srcDir(generatedCommonTestDir)
                }
            }
        }

        val generateTestBalloonInitializationTask = tasks.register("generateTestBalloonInitialization") {
            outputs.dir(generatedCommonTestDir)
            doLast {
                val directory = Path("${generatedCommonTestDir.get()}/kotlin")
                check(directory.exists() || directory.toFile().mkdirs()) { "Could not create directory '$directory'" }
                with(BuildConfig) {
                    (directory / "EntryPointAnchor.kt").writeText(
                        """
                        package de.infix.testBalloon.framework.internal.entryPoint

                        // This file was generated by Gradle plugin id("$PROJECT_GROUP_ID") version "$PROJECT_VERSION".
                        // The compiler plugin will populate it with entry point code. 

                        """.trimIndent()
                    )
                }
            }
        }

        tasks.withType(KotlinCompilationTask::class.java) {
            if (name.contains("Test")) {
                dependsOn(generateTestBalloonInitializationTask)
            }
        }

        tasks.withType(Test::class.java) {
            // https://docs.gradle.org/current/userguide/java_testing.html
            useJUnitPlatform()

            // Ask Gradle to skip scanning for test classes. We don't need it as our compiler plugin already
            // knows. Does this make a difference? I don't know.
            isScanForTestClasses = false

            // Pass TEST_* environment variables from the Gradle invocation to the test JVM.
            for ((name, value) in providers.environmentVariablesPrefixedBy("TEST_").get()) {
                environment(name, value)
            }

            // Pass TEST_* system properties as environment variables. NOTE: Doesn't help with K/Native.
            for ((name, value) in providers.systemPropertiesPrefixedBy("TEST_").get()) {
                environment(name, value)
            }
        }

        val testRuntimeOnlyConfigurations = setOf("testRuntimeOnly", "jvmTestRuntimeOnly")

        configurations.configureEach {
            if (name in testRuntimeOnlyConfigurations) {
                dependencies.add(project.dependencies.create(BuildConfig.PROJECT_JUNIT_PLATFORM_LAUNCHER))
            }
        }
    }

    override fun isApplicable(kotlinCompilation: KotlinCompilation<*>): Boolean =
        kotlinCompilation.name == KotlinCompilation.TEST_COMPILATION_NAME

    override fun applyToCompilation(kotlinCompilation: KotlinCompilation<*>): Provider<List<SubpluginOption>> {
        val project = kotlinCompilation.target.project
        val extension = project.extensions.getByType(GradleExtension::class.java)

        return project.provider {
            listOf(
                SubpluginOption(key = "debug", value = extension.debug.toString()),
                SubpluginOption(key = "jvmStandalone", value = extension.jvmStandalone.toString())
            )
        }
    }

    override fun getCompilerPluginId(): String = BuildConfig.PROJECT_COMPILER_PLUGIN_ID

    override fun getPluginArtifact(): SubpluginArtifact = SubpluginArtifact(
        groupId = BuildConfig.PROJECT_GROUP_ID,
        artifactId = BuildConfig.PROJECT_COMPILER_PLUGIN_ARTIFACT_ID,
        version = BuildConfig.PROJECT_VERSION
    )
}
